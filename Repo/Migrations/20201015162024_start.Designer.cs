// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repo;

namespace Repo.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201015162024_start")]
    partial class start
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.Models.Bill", b =>
                {
                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Number");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("Data.Models.CallingPlan", b =>
                {
                    b.Property<string>("CallingPlanId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Cost")
                        .HasColumnType("real");

                    b.Property<float>("Minutes")
                        .HasColumnType("real");

                    b.HasKey("CallingPlanId");

                    b.ToTable("CallingPlans");
                });

            modelBuilder.Entity("Data.Models.CallingPlanAssignment", b =>
                {
                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<string>("CallingPlanId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PhoneNumber", "Year", "Month", "CallingPlanId");

                    b.HasIndex("CallingPlanId");

                    b.ToTable("CallingPlanAssignments");
                });

            modelBuilder.Entity("Data.Models.CostCenter", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ManagementId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.HasIndex("ManagementId");

                    b.ToTable("CostCenters");
                });

            modelBuilder.Entity("Data.Models.DataPlan", b =>
                {
                    b.Property<string>("DataPlanId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Cost")
                        .HasColumnType("real");

                    b.Property<int>("Data")
                        .HasColumnType("int");

                    b.HasKey("DataPlanId");

                    b.ToTable("DataPlans");
                });

            modelBuilder.Entity("Data.Models.DataPlanAssignment", b =>
                {
                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<string>("DataPlanId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PhoneNumber", "Year", "Month", "DataPlanId");

                    b.HasIndex("DataPlanId");

                    b.ToTable("DataPlanAssignments");
                });

            modelBuilder.Entity("Data.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CostCenterCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("CostCenterCode");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Data.Models.GPRS", b =>
                {
                    b.Property<int>("GPRSId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("APN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<float>("Charge")
                        .HasColumnType("real");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneLinePhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Roaming")
                        .HasColumnType("bit");

                    b.Property<float>("Total")
                        .HasColumnType("real");

                    b.Property<string>("VolFact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Volume")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GPRSId");

                    b.HasIndex("PhoneLinePhoneNumber");

                    b.ToTable("GPRSs");
                });

            modelBuilder.Entity("Data.Models.LandlinePhoneCall", b =>
                {
                    b.Property<int>("Extension")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Addressee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Cost")
                        .HasColumnType("real");

                    b.Property<string>("Destination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Duration")
                        .HasColumnType("real");

                    b.HasKey("Extension", "DateTime", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("LandLinePhoneCalls");
                });

            modelBuilder.Entity("Data.Models.Management", b =>
                {
                    b.Property<int>("ManagementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ManagementId");

                    b.ToTable("Managements");
                });

            modelBuilder.Entity("Data.Models.MobilePhone", b =>
                {
                    b.Property<string>("IMEI")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IMEI");

                    b.ToTable("MobilePhones");
                });

            modelBuilder.Entity("Data.Models.MobilePhoneCall", b =>
                {
                    b.Property<int>("MobilePhoneCallId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Addressee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Charge")
                        .HasColumnType("real");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<float>("Duration")
                        .HasColumnType("real");

                    b.Property<float>("LD")
                        .HasColumnType("real");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("RoamingCall")
                        .HasColumnType("bit");

                    b.Property<float>("TA")
                        .HasColumnType("real");

                    b.Property<float>("TotalCost")
                        .HasColumnType("real");

                    b.HasKey("MobilePhoneCallId");

                    b.HasIndex("PhoneNumber");

                    b.ToTable("MobilePhoneCalls");
                });

            modelBuilder.Entity("Data.Models.MobilePhoneEmployee", b =>
                {
                    b.Property<string>("IMEI")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("IMEI");

                    b.HasIndex("EmployeeId");

                    b.ToTable("MobilePhoneEmployees");
                });

            modelBuilder.Entity("Data.Models.PhoneLine", b =>
                {
                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("CallsDetails")
                        .HasColumnType("bit");

                    b.Property<string>("Contract")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GPRSDetails")
                        .HasColumnType("bit");

                    b.Property<int>("PIN")
                        .HasColumnType("int");

                    b.Property<int>("PUK")
                        .HasColumnType("int");

                    b.Property<bool>("SMSDetails")
                        .HasColumnType("bit");

                    b.HasKey("PhoneNumber");

                    b.ToTable("PhoneLines");
                });

            modelBuilder.Entity("Data.Models.PhoneLineEmployee", b =>
                {
                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("PhoneNumber");

                    b.HasIndex("EmployeeId");

                    b.ToTable("PhoneLineEmployees");
                });

            modelBuilder.Entity("Data.Models.PhoneLineSummary", b =>
                {
                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.Property<float>("AirTime")
                        .HasColumnType("real");

                    b.Property<int>("DayOfUse")
                        .HasColumnType("int");

                    b.Property<float>("DiscountLD")
                        .HasColumnType("real");

                    b.Property<float>("DiscountTA")
                        .HasColumnType("real");

                    b.Property<float>("ExtraCharges")
                        .HasColumnType("real");

                    b.Property<float>("GprsExpenses")
                        .HasColumnType("real");

                    b.Property<float>("ImportByDetails")
                        .HasColumnType("real");

                    b.Property<float>("LongDistance")
                        .HasColumnType("real");

                    b.Property<float>("Rent")
                        .HasColumnType("real");

                    b.Property<float>("RoamingExpenses")
                        .HasColumnType("real");

                    b.Property<float>("RoamingGprsExpenses")
                        .HasColumnType("real");

                    b.Property<float>("RoamingSmsExpenses")
                        .HasColumnType("real");

                    b.Property<float>("SmsExpenses")
                        .HasColumnType("real");

                    b.Property<float>("SubTotal")
                        .HasColumnType("real");

                    b.Property<float>("Total")
                        .HasColumnType("real");

                    b.Property<int>("TotalCalls")
                        .HasColumnType("int");

                    b.HasKey("PhoneNumber", "Month", "Year");

                    b.ToTable("PhoneLineSummaries");
                });

            modelBuilder.Entity("Data.Models.SMS", b =>
                {
                    b.Property<int>("SMSId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<float>("Charge")
                        .HasColumnType("real");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Destination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<string>("E_R")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("LD")
                        .HasColumnType("real");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Roaming")
                        .HasColumnType("bit");

                    b.Property<float>("Total")
                        .HasColumnType("real");

                    b.HasKey("SMSId");

                    b.HasIndex("PhoneNumber");

                    b.ToTable("SMS");
                });

            modelBuilder.Entity("Data.Models.SMSPlan", b =>
                {
                    b.Property<string>("SMSPlanId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Cost")
                        .HasColumnType("real");

                    b.Property<int>("Messages")
                        .HasColumnType("int");

                    b.HasKey("SMSPlanId");

                    b.ToTable("SmsPlans");
                });

            modelBuilder.Entity("Data.Models.SMSPlanAssignment", b =>
                {
                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<string>("SMSPlanId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PhoneNumber", "Year", "Month");

                    b.HasIndex("SMSPlanId");

                    b.ToTable("SmsPlanAssignments");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Data.Models.CallingPlanAssignment", b =>
                {
                    b.HasOne("Data.Models.CallingPlan", "CallingPlan")
                        .WithMany("CallingPlanAssignments")
                        .HasForeignKey("CallingPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.PhoneLine", "PhoneLine")
                        .WithMany("CallingPlanAssignments")
                        .HasForeignKey("PhoneNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.CostCenter", b =>
                {
                    b.HasOne("Data.Models.Management", "Management")
                        .WithMany("CostCenters")
                        .HasForeignKey("ManagementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.DataPlanAssignment", b =>
                {
                    b.HasOne("Data.Models.DataPlan", "DataPlan")
                        .WithMany("DataPlanAssignments")
                        .HasForeignKey("DataPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.PhoneLine", "PhoneLine")
                        .WithMany("DataPlanAssignments")
                        .HasForeignKey("PhoneNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.Employee", b =>
                {
                    b.HasOne("Data.Models.CostCenter", "CostCenter")
                        .WithMany("Employees")
                        .HasForeignKey("CostCenterCode");
                });

            modelBuilder.Entity("Data.Models.GPRS", b =>
                {
                    b.HasOne("Data.Models.PhoneLine", "PhoneLine")
                        .WithMany()
                        .HasForeignKey("PhoneLinePhoneNumber");
                });

            modelBuilder.Entity("Data.Models.LandlinePhoneCall", b =>
                {
                    b.HasOne("Data.Models.Employee", "Employee")
                        .WithMany("LandlinePhoneCalls")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.MobilePhoneCall", b =>
                {
                    b.HasOne("Data.Models.PhoneLine", "PhoneLine")
                        .WithMany("MobilePhoneCalls")
                        .HasForeignKey("PhoneNumber");
                });

            modelBuilder.Entity("Data.Models.MobilePhoneEmployee", b =>
                {
                    b.HasOne("Data.Models.Employee", "Employee")
                        .WithMany("MobilePhoneEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.MobilePhone", "MobilePhone")
                        .WithMany("MobilePhoneEmployee")
                        .HasForeignKey("IMEI")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.PhoneLineEmployee", b =>
                {
                    b.HasOne("Data.Models.Employee", "Employee")
                        .WithMany("PhoneLineEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.PhoneLine", "PhoneLine")
                        .WithMany("PhoneLineEmployees")
                        .HasForeignKey("PhoneNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.PhoneLineSummary", b =>
                {
                    b.HasOne("Data.Models.PhoneLine", "PhoneLine")
                        .WithMany("PhoneLineSummaries")
                        .HasForeignKey("PhoneNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Models.SMS", b =>
                {
                    b.HasOne("Data.Models.PhoneLine", "PhoneLine")
                        .WithMany("SMSs")
                        .HasForeignKey("PhoneNumber");
                });

            modelBuilder.Entity("Data.Models.SMSPlanAssignment", b =>
                {
                    b.HasOne("Data.Models.PhoneLine", "PhoneLine")
                        .WithMany("SmsPlanAssignments")
                        .HasForeignKey("PhoneNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.SMSPlan", "SmsPlan")
                        .WithMany("SmsPlanAssignments")
                        .HasForeignKey("SMSPlanId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
